ggtitle('Daily Return for GILD',
subtitle = ) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns, color = daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = ) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = ) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns, GILD$GILD.Close)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = ) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns, color = GILD$GILD.Close)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = ) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = ) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = paste('Geometric Mean Return =', round(gm.return, 2))) +
theme_fivethirtyeight()
ggplot(GILD.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.return, color = 'dark blue') +
ggtitle('Daily Return for GILD',
subtitle = paste('Geometric Mean Return =', round(gm.return, 4))) +
theme_fivethirtyeight()
return(gm.return)
plot.return <- function(ticker, sell.date = '2017-08-07')
{
return <- dailyReturn(ticker[paste('/', sell.date)])
gm.return <- geometric.mean(return, na.rm = T)
return(gm.return)
}
plot.return(ARKQ)
stock <- getSymbols(ticker, from = '2017-07-03')
plot.return <- function(ticker, sell.date = '2017-08-07')
{
stock <- getSymbols(ticker, from = '2017-07-03')
return <- dailyReturn(stock[paste('/', sell.date)])
gm.return <- geometric.mean(return, na.rm = T)
return(gm.return)
}
plot.return('ARKQ')
plot.return('ARKQ')
ggplot(AMGN.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = geometric.mean(AMGN.return, na.rm = T), color = 'blue') +
ggtitle('Daily Return for AMGN') +
theme_fivethirtyeight()
gm.return <- geometric.mean(GILD.return, na.rm = T)
ORCL.return <- dailyReturn(ORCL['/2017-07-27'])
gm.ORCL <- geometric.mean(ORCL.return, na.rm = T)
ggplot(ORCL.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ORCL, color = 'dark blue') +
ggtitle('Daily Return for ORCL',
subtitle = paste('Geometric Mean Return =', round(gm.ORCL, 4))) +
theme_fivethirtyeight()
chartSeries(ORCL)
ggplot(ORCL.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ORCL, color = 'dark blue') +
ggtitle('Daily Return for ORCL',
subtitle = paste('Geometric Mean Return =', round(gm.ORCL, 4))) +
theme_fivethirtyeight()
ggplot(ORCL.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ORCL, color = 'dark blue') +
ggtitle('Daily Return for ORCL',
subtitle = paste('Geometric Mean Return =', round(gm.ORCL, 6))) +
theme_fivethirtyeight()
ggplot(ORCL.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ORCL, color = 'dark blue') +
ggtitle('Daily Return for ORCL',
subtitle = paste('Geometric Mean Return =', round(gm.ORCL, 4))) +
theme_fivethirtyeight()
ARKQ.return <- dailyReturn(ARKQ['/2017-07-24'])
gm.ARKQ <- geometric.mean(ARKQ.return, na.rm = T)
ggplot(ARKQ.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ARKQ, color = 'dark blue') +
ggtitle('Daily Return for ARKQ',
subtitle = paste('Geometric Mean Return =', round(gm.ARKQ, 4))) +
theme_fivethirtyeight()
quarterlyReturn(ARKQ)
ggplot(ARKQ.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ARKQ, color = 'dark blue') +
ggtitle('Daily Return for ARKQ',
subtitle = paste('Geometric Mean Return =', round(gm.ARKQ, 4),
'& Holding Period Return =', round(quarterlyReturn(ARKQ), 4))) +
theme_fivethirtyeight()
ROBO.return <- dailyReturn(ROBO['/2017-08-04'])
gm.ROBO <- geometric.mean(ROBO.return, na.rm = T)
ggplot(ROBO.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ROBO, color = 'dark blue') +
ggtitle('Daily Return for ROBO',
subtitle = paste('Geometric Mean Return =', round(gm.ROBO, 4))) +
theme_fivethirtyeight()
ggplot(ROBO.return, aes(Index, daily.returns)) +
geom_line() +
geom_hline(yintercept = gm.ROBO, color = 'dark blue') +
ggtitle('Daily Return for ROBO',
subtitle = paste('Geometric Mean Return =', round(gm.ROBO, 4),
'& Holding Period Return =', round(quarterlyReturn(ARKQ), 4))) +
theme_fivethirtyeight()
chartSeries(ROBO)
chartSeries(ROBO.return)
chartSeries(ROBO)
chartSeries(ARKQ)
chartSeries(ORCL)
addLines(x = '2017-07-27')
addLines(x = as.Date('2017-07-27'))
GILD.return <- dailyReturn(GILD['/2017-08-03'])
addLines(x = as.Date('2017-07-27'))
GILD.return <- dailyReturn(GILD['/2017-08-03'])
GILD.return <- dailyReturn(GILD['/2017-08-03'])
GILD.return <- dailyReturn(GILD['/2017-08-03'])
chartSeries(ORCL)
addLines(x = as.Date('2017-07-27'))
chartSeries(ORCL)
addTA('2017-07-27')
addTA(as.Date('2017-07-27'))
chartSeries(ORCL)
addTA(as.Date('2017-07-27'))
addLines(v= 7)
addLines(v= '2017-07-27')
addLines(v= as.Date('2017-07-27'))
index(ORCL, '2017-07-27')
chartSeries(ORCL)
detach("package:ggplot2", unload=TRUE)
detach("package:ggthemes", unload=TRUE)
which(index(ORCL) == as.POSIXlt('2017-07-27', tz = 'UTC'))
as.POSIXlt('2017-07-27', tz = 'UTC')
View(ORCL)
View(ORCL)
which(index(ORCL) == as.POSIXlt('2017-07-27'))
which(index(ORCL) == '2017-07-27'))
which(index(ORCL) == '2017-07-27')
chartSeries(ORCL)
addLines(v= which(index(ORCL) == '2017-07-27'))
chartSeries(AMGN)
addLines(v= which(index(ORCL) == '2017-07-26'))
detach("package:psych", unload=TRUE)
chartSeries(GILD)
addLines(v= which(index(ORCL) == '2017-08-03'))
addLines(v = which(index(GILD) == '2017-07-24'))
chartSeries(ARKQ)
addLines(v = which(index(GILD) == '2017-07-24'))
chartSeries(ROBO)
addLines(v = which(index(ROBO) == '2017-08-04'))
addLines(v= which(index(ORCL) == '2017-07-27'))
chartSeries(ORCL)
addLines(v= which(index(ORCL) == '2017-07-27'))
chartSeries(AMGN)
addLines(v= which(index(ORCL) == '2017-07-26'))
chartSeries(GILD)
addLines(v= which(index(ORCL) == '2017-08-03'))
chartSeries(ARKQ)
addLines(v = which(index(GILD) == '2017-07-24'))
chartSeries(ROBO)
addLines(v = which(index(ROBO) == '2017-08-04'))
getSymbols(c('ARKQ', 'GILD', 'ORCL', 'ROBO', 'AMGN'), from = '2017-07-03')
yearlyReturn(ORCL['/2017-07-27'])
chartSeries(AMGN)
addLines(v= which(index(ORCL) == '2017-07-26'))
yearlyReturn(AMGN['/2017-07-26'])
1501.50 / 96800.00
(170.53 - 182.60 )/ 170.53
getSymbols(c('ARKQ', 'GILD', 'ORCL', 'ROBO', 'AMGN'), from = '2017-07-03')
chartSeries(AMGN)
addLines(v= which(index(ORCL) == '2017-07-26'))
yearlyReturn(AMGN)
1501.50 / 96800.00
(170.53 - 182.60 )/ 170.53
getSymbols('SPY', from = '2017-06-29', to = '2017-08-07')
SPY.return <- dailyReturn(SPY)
library(quantmod)
getSymbols('SPY', from = '2017-06-29', to = '2017-08-07')
SPY.return <- dailyReturn(SPY)
library(ggplot2)
ggplot.zoo(SPY.return, aes(Index, daily.returns)
g <- ggplot.zoo(SPY.return, aes(Index, daily.returns) +
geom_line()
g
g <- ggplot.zoo(SPY.return)
autoplot.zoo(SPY.return)
which(SPY.return, Index = '2017-07-17')
autoplot.zoo(SPY.return) +
geom_vline(xintercept = which(index(SPY.return) == '2017-07-24'))
which(index(SPY.return) == '2017-07-24')
autoplot.zoo(SPY.return) +
geom_vline(xintercept = '2017-07-24')
autoplot.zoo(SPY.return) +
geom_vline(xintercept = which(index(SPY.return) == '2017-07-24'))
autoplot.zoo(SPY.return) +
geom_vline(xintercept = 17)
autoplot.zoo(SPY.return) +
geom_vline(xintercept = 1)
autoplot.zoo(SPY.return) +
geom_vline(aes(xintercept = 17))
autoplot.zoo(SPY.return) +
geom_vline(aes(xintercept = 17), color ='blue')
autoplot.zoo(SPY.return) +
geom_vline(xintercept = 17, color ='blue')
g <- autoplot.zoo(SPY.return)
g + geom_vline(xintercept = 17)
g + ggtitle('Test')
ggplot(fortify(SPY.return), aes(Index, daily.returns))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_vline(xintercept = 17)
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = 17)
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = 17)
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = '2017-07-24')
which(index(SPY.return) == '2017-02-24')
which(index(SPY.return) == '2017-07-24')
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.Date('2017-07-24'))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.integer(17))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.numeric('2017-07-24'))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.numeric(17))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = index('2017-07-24'))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = 17)
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date('2017-07-24')))
as.numeric(as.Date('2017-07-24'))
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date('2017-07-24')), color = 'salmon')
library(ggthemes)
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date('2017-07-24')), color = 'salmon') +
theme_economist_white()
transform(SPY.return, returns = daily.returns)
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_area() +
geom_vline(xintercept = as.numeric(as.Date('2017-07-24')), color = 'salmon') +
theme_economist_white()
ggplot(fortify(SPY.return), aes(Index, daily.returns)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date('2017-07-24')), color = 'salmon') +
theme_economist_white()
library(quantmod)
library(ggplot2)
getSymbols('GOOGL')
library(quantmod)
getSymbols('TWX')
library(quantmod)
library(ggplot2)
library(ggthemes)
getSymbols(c('ARKQ', 'GILD', 'ORCL', 'ROBO', 'AMGN'), from = '2017-06-29', to = '2017-08-07')
chartSeries(AMGN)
addLines(v= which(index(ORCL) == '2017-07-26'))
addLines(v= which(index(GILD) == '2017-07-03'), col = 'red')
chartSeries(ARKQ)
addLines(v = which(index(ARKQ) == '2017-07-24'))
addLines(v= which(index(ARKQ) == '2017-07-03'), col = 'red')
-1120/99855 #HPR#
840/100120
840/100120
*20
reutrns <- c(840/100120,1501.50 / 96800.00, 5460/99512, -1120/99855, 4872/99528)
returns *12
returns *12
returns <- c(840/100120,1501.50 / 96800.00, 5460/99512, -1120/99855, 4872/99528)
returns *12
rm(reutrns)
ORCL.return <- dailyReturn(ORCL)
sd(ORCL.return$daily.returns)
getSymbols('ORCL', from = '2017-06-01')
ORCL.return2 <- dailyReturn(ORCL)
sd(ORCL.return2$daily.returns)
chartSeries(ORCL)
getSymbols('SPY', from = '2017-06-29', to = '2017-08-07')
library(quantmod)
getSymbols('SPY', from = '2017-06-29', to = '2017-08-07')
yearlyReturn(SPY)
1:800
d <- 1:800
install.packages("rgeolocate")
install.packages("rgeolocate")
library("rjson", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
freegeoip <- function(ip, format = ifelse(length(ip)==1,'list','dataframe'))
{
if (1 == length(ip))
{
# a single IP address
require(rjson)
url <- paste(c("http://freegeoip.net/json/", ip), collapse='')
ret <- fromJSON(readLines(url, warn=FALSE))
if (format == 'dataframe')
ret <- data.frame(t(unlist(ret)))
return(ret)
} else {
ret <- data.frame()
for (i in 1:length(ip))
{
r <- freegeoip(ip[i], format="dataframe")
ret <- rbind(ret, r)
}
return(ret)
}
}
test <- freegeoip('74.215.79.161')
library(readr)
UrlClick <- read_csv("~/Documents/DU YR 3/INFO 3300/Project/Alamosa Tourism/BuildAlamosa/UrlClick.csv")
View(UrlClick)
GeoLocation <- freegeoip(UrlClick$ip)
install.packages(c("backports", "BH", "boot", "dplyr", "gridExtra", "HSAUR2", "knitr", "Matrix", "mgcv", "psych", "Rcpp", "rlang", "scales", "shiny", "tibble"))
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ips <- select(UrlClick, ip)
setwd('~/Documents/GitHub/RaleighInfo3300Repo/BuildAlamosa/')
freegeoip <- function(ip, format = ifelse(length(ip)==1,'list','dataframe'))
{
if (1 == length(ip))
{
# a single IP address
require(rjson)
url <- paste(c("http://freegeoip.net/json/", ip), collapse='')
ret <- fromJSON(readLines(url, warn=FALSE))
if (format == 'dataframe')
ret <- data.frame(t(unlist(ret)))
return(ret)
} else {
ret <- data.frame()
for (i in 1:length(ip))
{
r <- freegeoip(ip[i], format="dataframe")
ret <- rbind(ret, r)
}
return(ret)
}
}
library(rjson)
library(dplyr)
library(iptools)
urlclick <- read.csv('UrlClick.csv', header = F) ##compare against sub ids
subscriber <- read.csv('Subscriber.csv', header = F)
View(urlclick)
View(subscriber)
View(urlclick)
urlclick <- mutate(urlclick, missing = 'False')
urlclick$v4[1]
urlclick$v4[,1]
urlclick$V4
urlclick$V4[1]
urlclick$V4[4]
urlclick <- mutate(urlclick, missing = 'True')
for (i in 1:nrows(urlclick)) {
for (j in 1:nrows(subscriber)) {
if (urlclick$V4[i] == subscriber$V1[i]) {
urlclick$missing[i] <- 'False'
break
}
}
}
for (i in 1:nrow(urlclick)) {
for (j in 1:nrow(subscriber)) {
if (urlclick$V4[i] == subscriber$V1[i]) {
urlclick$missing[i] <- 'False'
break
}
}
}
table(urlclick$missing)
for (i in 1:nrow(urlclick)) {
for (j in 1:nrow(subscriber)) {
if (urlclick$V4[i] == subscriber$V1[j]) {
urlclick$missing[i] <- 'False'
break
}
}
}
table(urlclick$missing)
urlclick <- mutate(urlclick, missing = 'True')
match(urlclick$V4[1], table = subscriber$V1)
match(25482, table = subscriber$V1)
match(333363, table = subscriber$V1, nomatch = 0)
for (i in 1:nrow(urlclick)) {
if (match(urlclick$V4[i] == 0)) {
urlclick$missing <- 'False'
}
}
for (i in 1:nrow(urlclick)) {
if (match(urlclick$V4[i], table = subscriber$V1, nomatch = 0) == 0) {
urlclick$missing <- 'False'
}
}
table(urlclick$missing)
for (i in 1:nrow(urlclick)) {
if (match(urlclick$V4[i], table = subscriber$V1, nomatch = 0) == 0) {
urlclick$missing <- 'False'
}
}
table(urlclick$missing)
for (i in 1:nrow(urlclick)) {
if (match(urlclick$V4[i], table = subscriber$V1, nomatch = 0) == 0) {
urlclick$missing[i] <- 'False'
}
}
table(urlclick$missing)
urlclick$missing[1] <- 'False'
urlclick <- mutate(urlclick, missing = 'True')
urlclick <- mutate(urlclick, missing = 'True')
for (i in 1:nrow(urlclick)) {
if (match(urlclick$V4[i], table = subscriber$V1, nomatch = 0) == 0) {
urlclick$missing[i] <- 'False'
}
}
table(urlclick$missing)
for (i in 1:nrow(urlclick)) {
if (match(urlclick$V4[i], table = subscriber$V1, nomatch = 0) == 0) {
urlclick$missing[i] <- 'False'
browser()
}
}
for (i in 1:nrow(urlclick)) {
if (match(x = urlclick$V4[i], table = subscriber$V1, nomatch = 0) == 0) {
urlclick$missing[i] <- 'False'
browser()
}
}
table(urlclick$missing)
match(urlclick$V4, subscriber$V1)
match(x = urlclick$V4, table = subscriber$V1, nomatch = 0)
matches <- match(x = urlclick$V4, table = subscriber$V1, nomatch = 0)
table(matches)
summarise(group_by(matches, 0))
summarise(matches)
filter(matches, 0)
filter(matches, matches == 0)
arrange(matches)
summarize(matches, count = count(matches == 0))
matches <- data.frame(match(x = urlclick$V4, table = subscriber$V1, nomatch = 0))
summarize(matches, count(matches == 0))
summarize(matches, sum(matches == 0))
summarize(matches, missing sum(matches == 0))
summarize(matches, missing = sum(matches == 0))
matches <- data.frame(match(x = urlclick$V4, table = subscriber$V1, nomatch = -1))
summarize(matches, missing = sum(matches == -1))
matches <- data.frame(match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.null(matches)))
summarize(matches, missing = sum(!is.null(matches)))
summarize(matches, missing = sum(is.null(matches)))
View(matches)
matches <- data.frame(locations = match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.null(matches)))
summarize(matches, missing = sum(is.null(locations)))
summarize(matches, missing = sum(!is.null(locations)))
summarize(matches, missing = sum(is.null(locations)))
View(subscriber)
summarize(matches, missing = count(is.null(locations)))
summarize(matches, missing = count(is.na(locations)))
summarize(matches, missing = sum(is.na(locations)))
summarize(matches, missing = sum(!is.na(locations)))
urlclick$V4[1] <- 1
matches <- data.frame(locations = match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.na(locations)))
matches <- data.frame(locations = match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.na(locations)))
urlclick <- mutate(urlclick, missing = 'True')
summarize(matches, missing = sum(is.na(locations)))
matches <- data.frame(locations = match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.na(locations)))
urlclick <- mutate(urlclick, missing = 'True')
matches <- data.frame(locations = match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.na(locations)))
urlclick <- read.csv('UrlClick.csv', header = F) ##compare against sub ids
subscriber <- read.csv('Subscriber.csv', header = F)
urlclick <- mutate(urlclick, missing = 'True')
matches <- data.frame(locations = match(x = urlclick$V4, table = subscriber$V1))
summarize(matches, missing = sum(is.na(locations)))
